#include "services_dune.fcl"
#include "supernova_dune.fcl"

process_name: SupernovaGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService:          { fileName: "gen_hist.root" }
  TimeTracker:           {                           }
  SimpleMemoryCheck:     { ignoreTotal: 1            } # Default is one
  RandomNumberGenerator: {                           } # ART native random number generator
  FileCatalogMetadata:   @local::art_file_catalog_mc
                         @table::dunefd_services
}

# Start each new event with an empty event.
source:
{
  module_type:     EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:       1000          # Number of events to create
  firstRun:           1          # Run number to use for this file
  firstEvent:         1          # Number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::dunefd_1x2x6_supernova
   rns:       { module_type: "RandomNumberSaver" }
 }

 # Define the producer and filter modules for this path, order matters, 
 # filters reject all following items. See lines starting physics.producers below
 simulate:      [ rns, generator ]

 # Define the output stream, there could be more than one if using filters 
 stream1:       [ out1           ]

 # Trigger_paths is a keyword and contains the paths that modify the art::event, 
 # ie filters and producers
 trigger_paths: [ simulate       ]

 # end_paths is a keyword and contains the paths that do not modify the art::Event, 
 # ie analyzers and output streams. These all run simultaneously
 end_paths:     [ stream1        ]
}

# Block to define where the output goes. If you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: XXX,XXX,XXX,XXX}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type:      RootOutput
   fileName:        "gen_gen.root"
   dataTier:        "generated"
   compressionLevel: 1
 }
}

services.Geometry: @local::dune10kt_1x2x6_geo
physics.producers.generator.GeneratorAlg.NumberOfNeutrinos: 1
physics.producers.generator.GeneratorAlg.UsePoissonDistribution: false
