#include "services_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "opticaldetectorservices_dune.fcl"


process_name: OpDigi

services:
{
  # Load the service that manages root files for histograms.
  TFileService:          { fileName: "digi_hist.root" }
  TimeTracker:           {                            }
  SimpleMemoryCheck:     { ignoreTotal: 1             } # Default is one
  RandomNumberGenerator: {                            } # ART native random number generator
  FileCatalogMetadata:   @local::art_file_catalog_mc
                         @table::dunefd_simulation_services
}

# Source is now a root file
source:
{
  module_type: RootInput
  maxEvents:   1000       # Number of events to create
  # Specify from command line with -s or --source
   
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type
physics:
{
   
   producers:
   {
      opdigi:    @local::dunefd_opdigi 
      rns:       { module_type: "RandomNumberSaver" }
   }

   analyzers:
   {
      pmtresponse: @local::dunefd_simphotoncounter
   }
   
   
   # Define the producer and filter modules for this path, order matters, 
   # filters reject all following items. See lines starting physics.producers below
   simulate:      [ opdigi, rns        ] 
   analyzeIt:     [ pmtresponse        ]
   
   # Define the output stream, there could be more than one if using filters 
   stream1:       [ out1               ]
   
   # Trigger_paths is a keyword and contains the paths that modify the art::event, 
   # ie filters and producers
   trigger_paths: [ simulate           ] 
   
   # end_paths is a keyword and contains the paths that do not modify the art::Event, 
   # ie analyzers and output streams. These all run simultaneously
   end_paths:     [ analyzeIt, stream1 ]  
}

# Block to define where the output goes. If you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
   out1:
   {
      module_type:      RootOutput
      fileName:        "digi_gen.root"
      # Default file name, can override from command line with -o or --output
      dataTier:        "optical-simulated"
      compressionLevel: 1
   }
}

services.Geometry: @local::dune10kt_1x2x6_geo
